//! This module contains symbols generated by tonic-build based on the
//! project `.proto` files.

use crate::data::{ChatStorage, NameGenerator};
use std::time::SystemTime;
use tonic::{Request, Response, Status};

tonic::include_proto!("chatroom");

pub struct MyChatroom {
    chat_storage: ChatStorage,
    name_generator: NameGenerator,
}

impl MyChatroom {
    pub fn new(chat_storage: ChatStorage, name_generator: NameGenerator) -> Self {
        Self {
            chat_storage,
            name_generator,
        }
    }
}

#[tonic::async_trait]
impl chatroom_server::Chatroom for MyChatroom {
    async fn get_identity(
        &self,
        _request: Request<IdentityCreateRequest>,
    ) -> Result<Response<IdentityResponse>, Status> {
        let username = self.name_generator.get_name();
        self.chat_storage.announce_login(&username);
        let resp = IdentityResponse { username };

        Ok(Response::new(resp))
    }
    async fn create_message(
        &self,
        request: tonic::Request<Message>,
    ) -> Result<tonic::Response<MessageCreateResponse>, tonic::Status> {
        let msg = request.into_inner();
        self.chat_storage.publish_message(msg);
        Ok(Response::new(MessageCreateResponse {}))
    }
    async fn get_messages(
        &self,
        _request: tonic::Request<MessageListRequest>,
    ) -> Result<tonic::Response<MessageListResponse>, tonic::Status> {
        Ok(Response::new(MessageListResponse {
            messages: self.chat_storage.all_messages(),
        }))
    }
}

impl ChatLogEntry {
    pub fn new(msg: Message) -> Self {
        let now = SystemTime::now();
        Self {
            msg: Some(msg),
            timestamp: Some(now.into()),
        }
    }
}
