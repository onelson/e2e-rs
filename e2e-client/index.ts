/**
 * HTTP Client and typescript types generated by the backend code.
 */

import { Message, MessageListResponse } from "./_structs";
export * from "./_structs"; // re-export all types

export class MessagesAPI {
  // URI prefix for the backend server
  private readonly prefix: string;

  constructor(prefix: string) {
    this.prefix = prefix;
  }

  async createMessage(message: Message): Promise<void> {
    const resp = await fetch(`${this.prefix}/messages`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json"
      },
      body: JSON.stringify(message)
    });
    if (!resp.ok) {
      throw new Error(`Request failed: ${resp.statusText}`);
    }
  }

  async getMessages(): Promise<MessageListResponse> {
    const resp = await fetch(`${this.prefix}/messages`, {
      method: "GET",
      headers: { Accept: "application/json" }
    });
    if (!resp.ok) {
      throw new Error(`Request failed: ${resp.statusText}`);
    }
    return resp.json();
  }

  async getUsername(): Promise<string> {
    const resp = await fetch(`${this.prefix}/username`, { method: "POST" });
    if (!resp.ok) {
      throw new Error(`Request failed: ${resp.statusText}`);
    }
    return resp.text();
  }
}
